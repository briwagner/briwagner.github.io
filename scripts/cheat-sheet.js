var cheatSheet = [
  {
    title: "count {|obj| block }",
    content: "Returns the number of items in enum through enumeration. If an argument is given, the number of items in enum that are equal to item are counted. If a block is given, it counts the number of elements yielding a true value.",
    example: "ary = [1, 2, 4, 2] \nary.count #=> 4 \nary.count(2) #=> 2",
    href: "#count",
    name: "count",
  },
  {
    title: "drop_while {|arr| block}",
    content: "Drops elements up to, but not including, the first element for which the block returns nil or false and returns an array containing the remaining elements.",
    example: "a = [1, 2, 3, 4, 5, 0] \na.drop_while { |i| i < 3 } #=> [3, 4, 5, 0]",
    href: "#drop_while",
    name: "drop_while"
  },
  {
    title: "each_with_index(*args) {|obj, i| block}",
    content: "Calls block with two arguments, the item and its index, for each item in enum. Given arguments are passed through to each().",
    example: "hash.each_with_index { |item, index| hash[item] = index}\nhash #=> {'cat'=>0, 'dog'=>1, 'wombat'=>2}",
    href: "#each_index",
    name: "each_index",
  },
    {
    title: "find(ifnone = nil) {|obj| block}",
    content: "Passes each entry in enum to block. Returns the first for which block is not false. If no object matches, calls ifnone and returns its result when it is specified, or returns nil otherwise. (AKA detect)",
    example: "(1..100).find { |i| i % 5 == 0 and i % 7 == 0 }   #=> 35",
    href: "#find",
    name: "find",
  },
    {
    title: "find_all {|obj| block}",
    content: "Returns an array containing all elements of enum for which the given block returns a true value. AKA select",
    example: "(1..10).find_all { |i|  i % 3 == 0 }   #=> [3, 6, 9]",
    href: "#find_all",
    name: "find_all",
  },
    {
    title: "find_index(value)",
    content: "Compares each entry in enum with value or passes to block. Returns the index for the first for which the evaluated value is non-false. If no object matches, returns nil",
    example: "(1..100).find_index(50) #=> 49\n(1..100).find_index { |i| i % 5 == 0 and i % 7 == 0 }  #=> 34",
    href: "#find_index",
    name: "find_index",
  },
    {
    title: "flat_map {|obj| block}",
    content: "Returns a new array with the concatenated results of running block once for every element in enum.",
    example: "[1, 2, 3, 4].flat_map { |e| [e, -e] } #=> [1, -1, 2, -2, 3, -3, 4, -4]",
    href: "#flat_map",
    name: "flat_map",
  },
    {
    title: "inject(symb)",
    content: "Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator. If you specify a block, then for each element in enum the block is passed an accumulator value (memo) and the element. If you specify a symbol instead, then each element in the collection will be passed to the named method of memo. In either case, the result becomes the new value for memo. At the end of the iteration, the final value of memo is the return value for the method. AKA reduce",
    example: "(5..10).reduce(:+) #=> 45",
    href: "#inject",
    name: "inject",
  },
    {
    title: "map",
    content: "Returns a new array with the results of running block once for every element in enum.",
    example: "(1..4).map { |i| i*i }  #=> [1, 4, 9, 16]",
    href: "#map",
    name: "map",
  },
    {
    title: "max",
    content: "Returns the object in enum with the maximum value. The first form assumes all objects implement Comparable; the second uses the block to return a <=> b. If max(n) then returns n number. Also min. Also minmax.",
    example: "a.max(2) {|a, b| a.length <=> b.length }  #=> ['albatross', 'horse']",
    href: "#max",
    name: "max",
  },
    {
    title: "select",
    content: "Returns an array containing all elements of enum for which the given block returns a true value. AKA find_all",
    example: "[1,2,3,4,5].select { |num|  num.even?  } #=> [2, 4]",
    href: "#select",
    name: "select",
  },
  {
    title: "sort",
    content: "Returns an array containing the items in enum sorted, either according to their own <=> method, or by using the results of the supplied block. The block should return -1, 0, or +1 depending on the comparison between a and b. As of Ruby 1.8, the method Enumerable#sort_by implements a built-in Schwartzian Transform, useful when key computation or comparison is expensive.",
    example: "(1..10).sort { |a, b| b <=> a }  #=> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
    href: "#sort",
    name: "sort",
  },
  {
    title: "take_while",
    content: "Passes elements to the block until the block returns nil or false, then stops iterating and returns an array of all prior elements.",
    example: "a.take_while { |i| i < 3 }   #=> [1, 2]",
    href: "#take_while",
    name: "take_while",
  },
  {
    title: "zip(arg...)",
    content: "Takes one element from enum and merges corresponding elements from each args. This generates a sequence of n-element arrays, where n is one more than the count of arguments. The length of the resulting sequence will be enum#size. If the size of any argument is less than enum#size, nil values are supplied. If a block is given, it is invoked for each output array, otherwise an array of arrays is returned.",
    example: "a = [ 4, 5, 6 ] \nb = [ 7, 8, 9 ]\n[1, 2, 3].zip(a, b)  #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]",
    href: "#zip",
    name: "zip",
  },{
    title: "ARRAY collect",
    content: "Creates a new array containing the values returned by the block.",
    example: "a = [ 'a', 'b', 'c', 'd' ]\na.collect { |x| x + '!'' }   #=> ['a!', 'b!', 'c!', 'd!']",
    href: "#array_collect",
    name: "array_collect",
  },{
    title: "ARRAY count(n)",
    content: "Returns the number of elements. If an argument is given, counts the number of elements which equal obj using ==.",
    example: "ary = [1, 2, 4, 2] \nary.count       #=> 4\nary.count(2)     #=> 2",
    href: "#array_count",
    name: "array_count",
  },
  {
    title: "ARRAY flatten / flatten(level)",
    content: "Returns a new array that is a one-dimensional flattening of self (recursively). That is, for every element that is an array, extract its elements into the new array.",
    example: "a.flatten    #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
    href: "#array_flatten",
    name: "array_flatten"
  },
  {
    title: "ARRAY include?(x)",
    content: "Returns true if the given object is present in self (that is, if any element == object), otherwise returns false.",
    example: "a = [ 'a', 'b', 'c' ] \na.include?('b')   #=> true\na.include?('z')   #=> false",
    href: "#include",
    name: "include",
  },
  {
    title: "ARRAY join(optional separator)",
    content: "Returns a string created by converting each element of the array to a string, separated by the given separator. If the separator is nil, it uses current $,. If both the separator and $, are nil, it uses empty string.",
    example: "[ 'a', 'b', 'c' ].join('-')   #=> 'a-b-c'",
    href: "#join",
    name: "join",
  },
  {
    title: "ARRAY rassoc",
    content: "Searches through the array whose elements are also arrays. Compares obj with the second element of each contained array using obj.==. Returns the first contained array that matches obj.",
    example: "a = [ [ 1, \"one\"], [2, \"two\"], [3, \"three\"], [\"ii\", \"two\"] ]\na.rassoc(\"two\")    #=> [2, \"two\"] \na.rassoc(\"four\")   #=> nil",
    href: "#rassoc",
    name: "rassoc",
  },
  {
    title: "shuffle",
    content: "Returns a new array with elements of self shuffled.",
    example: "a = [ 1, 2, 3 ]   #=> [1, 2, 3]\na.shuffle        #=> [2, 3, 1]\na            #=> [1, 2, 3]",
    href: "#shuffle",
    name: "shuffle"
  },
  {
    title: "slice",
    content: "Element Reference â€” Returns the element at index, or returns a subarray starting at the start index and continuing for length elements, or returns a subarray specified by range of indices. Negative indices count backward from the end of the array (-1 is the last element). For start and range cases the starting index is just before an element. Additionally, an empty array is returned when the starting index for an element range is at the end of the array.",
    example: "a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\na[1, 2]       #=> [ \"b\", \"c\" ]\na[1..3]  #=> [ \"b\", \"c\", \"d\" ]",
    href: "#slice",
    name: "slice"
  },
  {
    title: "to_a / to_ary / to_h / to_s",
    content: "",
    example: "[[:foo, :bar], [1, 2]].to_h\n  # => {:foo => :bar, 1 => 2}",
    href: "#to_a",
    name: "to_a",
  },
];